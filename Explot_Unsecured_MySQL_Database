# Exploit 2: Unsecured MySQL Database

## Discovery Process
Conducted an Nmap scan of the target to identify open ports and running services:

NMap Result (Image)

Identified the MySQL service running on port 3306, which is commonly used for database connections.

Exploitation:
Attempted to access the MySQL database using the mysql client from the Kali Linux VM.

Initial Command:

MySQL Error_1[Image]
When running this command, we encountered the error 2026 (HY000): TLS/SSL error: wrong version number. This was due to an SSL/TLS version mismatch between the MySQL client and the server.

Fix Applied: To resolve this, the connection was modified to disable SSL by using the --skip-ssl option:

MySQL Gained Access[Image]

This successfully allowed us to bypass the SSL/TLS connection issue and access the MySQL database.

Explanation of Command:

-u root: Specifies the root user to attempt login.
-p: Prompts for a password (used to test the default password or perform a brute-force attack).
--skip-ssl: Disables SSL, which resolved the error related to SSL/TLS version mismatch.
-h 192.168.1.184: Specifies the Metasploitable VM's IP address.
No Password Set:
Upon logging in without specifying a password, the MySQL service allowed access without authentication, as no password had been set for the root user.

This highlights the unsecured nature of the MySQL service on Metasploitable, allowing unauthenticated access to the database.

Results:
Successfully gained access to the MySQL database on the Metasploitable VM.

Password Found:

No password was required to access the MySQL service.
Once logged in, we were able to access the MySQL server and perform various queries, including listing databases, checking users, and dumping sensitive data.

Proof of Work:
After gaining access, we verified the connection by querying the databases.

Session Output (Image)

Successfully logged in and accessed the MySQL service.

Recommendations for Mitigation:
Enforce Strong Password Policies:

Use a minimum password length of 12 characters with a combination of uppercase, lowercase, numbers, and special characters.
Disable remote root login, if possible, to limit exposure to attacks.
Disable Remote Access for MySQL:

Modify the MySQL configuration to restrict access to only trusted IP addresses.
Enable SSL/TLS Encryption for MySQL:

Configure MySQL to use SSL/TLS encryption to protect data in transit and prevent man-in-the-middle attacks.
Ensure proper configuration of SSL certificates to avoid version mismatches.
Limit User Privileges:

Use least-privilege principles when creating MySQL users, ensuring they only have the necessary permissions.
Use Intrusion Detection and Prevention Tools:

Implement tools such as fail2ban or a firewall to limit login attempts and block IPs after multiple failed login attempts.
